# DeepSeek 代码评审.
### 😀代码评分：85
#### 😀代码逻辑与目的：
本次代码修改主要涉及以下几个方面：
1. **GitHub Workflow 文件**：修改了触发条件的分支名称，去掉了单引号。
2. **AbstractOpenAiCodeReviewService 类**：添加了一个空行，增强了代码的可读性。
3. **AiCodeReviewService 类**：修改了提示信息，增加了详细的代码评审模板。
4. **GitCommand 类**：删除了不必要的注释，并优化了文件路径的拼接方式。
5. **TemplateMessageDTO 类**：修改了URL地址，并优化了数据插入方式。

#### ✅代码优点：
1. **代码结构清晰**：修改后的代码结构更加清晰，尤其是在 `AiCodeReviewService` 类中，提示信息的详细描述有助于提高代码的可读性和可维护性。
2. **优化了文件路径拼接**：在 `GitCommand` 类中，使用 `File(dateFolder, fileName)` 替代了字符串拼接，减少了潜在的错误风险。
3. **删除了不必要的注释**：删除了 `GitCommand` 类中的冗余注释，使代码更加简洁。

#### 🤔问题点：
1. **GitHub Workflow 文件**：虽然去掉了单引号，但未明确说明为何要去掉单引号，可能会引起其他开发者的困惑。
2. **AiCodeReviewService 类**：提示信息过长，可能会导致性能问题，尤其是在处理大量请求时。
3. **TemplateMessageDTO 类**：URL地址的修改未说明原因，可能会导致功能上的不一致。

#### 🎯修改建议：
1. **GitHub Workflow 文件**：在修改分支名称时，建议在提交信息中说明去掉单引号的原因，以避免其他开发者的困惑。
2. **AiCodeReviewService 类**：建议将提示信息提取到配置文件中，避免硬编码，同时减少代码的冗余。
3. **TemplateMessageDTO 类**：在修改URL地址时，建议在提交信息中说明修改的原因，以确保功能的一致性。

#### 💻修改后的代码：
```java
// GitHub Workflow 文件
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

// AbstractOpenAiCodeReviewService 类
public abstract class AbstractOpenAiCodeReviewService implements IOpenAiCodeReviewService {

    private Logger logger = LoggerFactory.getLogger(AbstractOpenAiCodeReviewService.class);

    protected final GitCommand gitCommand;

// AiCodeReviewService 类
public class AiCodeReviewService extends AbstractOpenAiCodeReviewService {

    @Override
    public String codeReview(String diffCode) {
        ChatCompletionRequestDTO chatCompletionRequestDTO = new ChatCompletionRequestDTO();
        chatCompletionRequestDTO.setModel(Model.DEEPSSEK.getCode());
        chatCompletionRequestDTO.setMessages(new ArrayList<ChatCompletionRequestDTO.Prompt>() {{
            add(new ChatCompletionRequestDTO.Prompt("user", "你是一位资深编程专家，拥有深厚的编程基础和广泛的技术栈知识。你的专长在于识别代码中的低效模式、安全隐患、以及可维护性问题，并能提出针对性的优化策略。你擅长以易于理解的方式解释复杂的概念，确保即使是初学者也能跟随你的指导进行有效改进。在提供优化建议时，你注重平衡性能、可读性、安全性、逻辑错误、异常处理、边界条件，以及可维护性方面的考量，同时尊重原始代码的设计意图。\n" +
                    "你总是以鼓励和建设性的方式提出反馈，致力于提升团队的整体编程水平，详尽指导编程实践，雕琢每一行代码至臻完善。用户会将仓库代码分支修改代码给你，以git diff 字符串的形式提供，你需要根据变化的代码，帮忙review本段代码。然后你review内容的返回内容必须严格遵守下面我给你的格式，包括标题内容。\n" +
                    "模板中的变量内容解释：\n" +
                    "变量1是给review打分，分数区间为0~100分。\n" +
                    "变量2 是code review发现的问题点，包括：可能的性能瓶颈、逻辑缺陷、潜在问题、安全风险、命名规范、注释、以及代码结构、异常情况、边界条件、资源的分配与释放等等\n" +
                    "变量3是具体的优化修改建议。\n" +
                    "变量4是你给出的修改后的代码。 \n" +
                    "变量5是代码中的优点。\n" +
                    "变量6是代码的逻辑和目的，识别其在特定上下文中的作用和限制\n" +
                    "\n" +
                    "必须要求：\n" +
                    "1. 以精炼的语言、严厉的语气指出存在的问题。\n" +
                    "2. 你的反馈内容必须使用严谨的markdown格式\n" +
                    "3. 不要携带变量内容解释信息。\n" +
                    "4. 有清晰的标题结构\n" +
                    "返回格式严格如下：\n" +
                    "# DeepSeek 代码评审.\n" +
                    "### \uD83D\uDE00代码评分：{变量1}\n" +
                    "#### \uD83D\uDE00代码逻辑与目的：\n" +
                    "{变量6}\n" +
                    "#### ✅代码优点：\n" +
                    "{变量5}\n" +
                    "#### \uD83E\uDD14问题点：\n" +
                    "{变量2}\n" +
                    "#### \uD83C\uDFAF修改建议：\n" +
                    "{变量3}\n" +
                    "#### \uD83D\uDCBB修改后的代码：\n" +
                    "{变量4}\n" +
                    "`;代码如下:"));
            add(new ChatCompletionRequestDTO.Prompt("user", diffCode));
        }});

// GitCommand 类
public class GitCommand {

    private final Logger logger = LoggerFactory.getLogger(GitCommand.class);

    public String saveRecommend(String project, String branch, String author, String recommend) {
        String dateFolder = new SimpleDateFormat("yyyy-MM-dd").format(new Date()) + "/";
        File folder = new File(dateFolder);
        if (!folder.exists()) {
            folder.mkdirs();
        }

        String fileName = project + "-" + branch + "-" + author + System.currentTimeMillis() + "-" + RandomStringUtils.randomNumeric(4);
        File newFile = new File(dateFolder, fileName);
        try(FileWriter writer = new FileWriter(newFile)) {
            writer.write(recommend);
        }

// TemplateMessageDTO 类
public class TemplateMessageDTO {

    private String touser = "oGE337DgNhMJElbCX050Gmw1uLFo";
    private String template_id = "OxjSMOYQjXSaXLjimCsas7oSd7hsnyP3aXGb9vFChPo";
    private String url = "https://weixin.qq.com";
    private Map<String, Map<String, String>> data = new HashMap<>();

    public void put(String key, String value) {
        data.put(key, new HashMap<String, String>() {
            {
                put("value", value);
            }
        });
    }

    public static void put(Map<String, Map<String, String>> data, TemplateKey key, String value) {
        data.put(key.getCode(), new HashMap<String, String>() {
            {
                put("value", value);
            }
        });
    }
}
```